##CONFIGURE## Name of the workflow
name: iOS Buildy Build

# This workflow is setup to make iOS builds and upload them to Buildy.io

# Controls when the action will run. 
# ##CONFIGURE## Setup the triggers to your project needs for a full list of triggers please refer to
# https://docs.github.com/en/actions/reference/events-that-trigger-workflows 
on:
  workflow_dispatch:

env:
  PRIVATE_REPO_ACCESS_TOKEN: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}
  AWS_BUILDY_BUCKET: ${{ secrets.AWS_BUILDY_BUCKET }}

  BUILD_NAME: ##CONFIGURE## (e.g GardenTails) #name of the project on Buildy.io (Not the same as the name of the game on the device thats set in Unity)
  TARGET: iOS #options(Android, iOS)
  STABILITY: Release #options (Develop, Release, Prototype, etc..)

  PREPROCESSOR_ID: ##CONFIGURE## (e.g iOSSandboxRelease) #this is set in the project setting under Envelope/Builder
  BUILD_OPTIONS: ##CONFIGURE## (e.g -Development or '' for no flags) #Can include any flags from https://docs.unity3d.com/ScriptReference/BuildOptions.html 

  SLACK_CHANNEL_ID: ##CONFIGURE## (e.g C02349UCTQA) 

jobs:
  build-unity:
    name: Build Unity Project
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack Start
        id: slack
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          status: UNITY-BUILDING
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
    
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}
          submodules: 'true'
          lfs: 'true'

      # Cache
      - uses: actions/cache@v2
        with:
          path: Library
          key: ${{ github.workflow }}-Library-${{ github.sha }}
          restore-keys: |
            ${{ github.workflow }}-Library
            
      # Sets up the NPM registry authentication for the Unity Package Manager.
      - name: Set UPM auth
        shell: bash
        run: |
          mkdir $RUNNER_TEMP/_github_home
          touch $RUNNER_TEMP/_github_home/.upmconfig.toml
          echo "$UPM_AUTH" > $RUNNER_TEMP/_github_home/.upmconfig.toml
        env:
          UPM_AUTH: ${{ secrets.UPM_AUTH }}

      # Build
      - name: Unity - Builder
        id: builder
        uses: game-ci/unity-builder@v2
        with:
          targetPlatform: ${{ env.TARGET }}
          buildMethod: Envelope.Builder.Editor.CI.Build
          customParameters: -preprocessId ${{ env.PREPROCESSOR_ID }} ${{ env.BUILD_OPTIONS }}
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}

      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: build-${{ env.TARGET }}
          path: build/${{ env.TARGET }}
      
      - name: Notify Slack Success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          status: UNITY-SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
      
      - name: Notify Slack Success
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          status: UNITY-FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}

  xcode-build-deploy:
    name: xCode Build
    runs-on: macos-latest
    needs: build-unity
    strategy:
      fail-fast: false
      matrix:
        targetLane: #for a list of available lanes go to https://github.com/playdots/builder-fastlane/tree/master/fastlane
          - beta
          - buildy

    
    env:
      IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}

      MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_TOKEN }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
      APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}
      APPSTORE_P8_PATH: ${{ format('{0}/fastlane/AppleAuthKey.p8', github.workspace) }}

    steps:
      - name: Notify Slack Start
        id: slack
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          status: iOS-BUILDING
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}

      #checkout the fastlane repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: 'playdots/builder-fastlane'
          token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}

      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-${{ env.TARGET }}
          path: build #Unpacks the iOS folder inside build so full path is build/iOS
      
      - name: Make App Store p8 and Fix File Permissions
        run: |
          echo "$APPSTORE_P8" > $APPSTORE_P8_PATH
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;

      # Configures AWS credentials for AWS CLI.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      #Sets up ruby and bundler and installs fastlane with cache.
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run Fastlane
        run: bundle exec fastlane ios $LANE
        env:
          LANE: ${{ matrix.targetLane }}
          METADATA: ${{ format('{{"GitBranch":"{0}","GitCommit":"{1}","GitUrl":"{2}"}}', github.ref, github.sha, github.repository) }}
          BUILDY_META_DIRECTORY: '.buildy-web-metadata'

      - name: Notify Slack Success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          status: iOS-${{ matrix.targetLane }}-SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
      
      - name: Notify Slack Success
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          status: iOS-${{ matrix.targetLane }}-FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
          
  cleanup:
    name: Cleanup Artifacts
    if: always()
    runs-on: ubuntu-latest
    needs: [xcode-build-deploy]
    steps:
      - name: Cleanup to avoid storage limit
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-iOS
